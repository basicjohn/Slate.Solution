@page "/"
@using System.Linq
@using System.ComponentModel.DataAnnotations
@inject IHttpService HttpService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

@if (loading)
{
  <span>Loading...</span>
}
else
{
  @if (AuthenticationService.User == null)
  {
    <div class="container-fluid">
  <h1>Welcome To The Slate!</h1>
  <div class="container">
    <h3>Please Register a new account or Login to continue...</h3>
  </div>
  <div class="container">
    <h2>Login</h2>
    <section>
      <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <section>
          <label>Email</label>
          <InputText @bind-Value="model.Email" type="text" />
          <ValidationMessage For="@(() => model.Email)" />
        </section>
        <section>
          <label>Password</label>
          <InputText @bind-Value="model.Password" type="password" class="form-control" />
          <ValidationMessage For="@(() => model.Password)" />
        </section>
        <button class="btn btn-primary">
          @if (loading)
              {
                <span class="spinner-border spinner-border-sm mr-1"></span>
              }
              Login
            </button>
            @if (!string.IsNullOrEmpty(error))
            {
              <div class="alert alert-danger mt-3 mb-0">@error</div>
            }
          </EditForm>
        </section>
      </div>
    </div>
  }
  else
  {
    <h1>Slate Whiteboarding Home</h1>
    <h2>Welcome, @AuthenticationService.User.Name</h2>

    <a href="/board/test">Open Test</a>
    <button @onclick="CreateNewBoard">New Board</button>

    <div class="">
  <h3>Owned Boards:</h3>
  @if (boardsOwned != null)
      {
        @foreach (Board b in boardsOwned)
        {
          <a href="/board/@b.Id">@b.Name</a>
        }
      }
      else
      {
        <h4>You don't have any boards yet.</h4>
      }
    </div>
    <div class="">
  <h3>Boards You Can Edit:</h3>
  @if (boardsEditable != null)
      {
        @foreach (Board b in boardsEditable)
        {
          <a href="/board/@b.Id">@b.Name</a>
        }
      }
      else
      {
        <h4>No boards you can edit found.</h4>
      }
    </div>
  }
}

@code {
  private Model model = new();
  private bool loading;
  private string error;
  private IEnumerable<Board> boardsOwned;
  private IEnumerable<Board> boardsEditable;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      loading = true;
      Console.WriteLine("SANITY CHECK 1");
      boardsOwned = await HttpService.Post<IEnumerable<Board>>("boards/owned",
      new { ownerId = AuthenticationService.User.Id });
      Console.WriteLine("SANITY CHECK 2");
      boardsEditable = await HttpService.Post<IEnumerable<Board>>("boards/editable",
      new { ownerId = AuthenticationService.User.Id });
      Console.WriteLine("SANITY CHECK 3");
      Console.WriteLine("COUNT OWNED - {0}", boardsOwned.ToList().Count);
      loading = false;
      StateHasChanged();
    }
    catch (Exception ex)
    {
      Console.WriteLine("PROBLEM INITIALIZING HOME {0}", ex);
    }
  }

  private async void HandleValidSubmit()
  {
    try
    {
      await AuthenticationService.Login(model.Email, model.Password);
      var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
      NavigationManager.NavigateTo(returnUrl);
      StateHasChanged();
    }
    catch (Exception ex)
    {
      error = ex.Message;
      loading = false;
      StateHasChanged();
    }
  }

  public void CreateNewBoard()
  {
    Console.WriteLine("Creating new board, with ID: {0}", AuthenticationService.User.Id);
    HttpService.Post<Board>("/boards", new { ownerId = AuthenticationService.User.Id });
  }

  private class Model
  {
    [Required]
    public string Email { get; set; }

    [Required]
    public string Password { get; set; }
  }
}