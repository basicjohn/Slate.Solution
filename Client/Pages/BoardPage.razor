@page "/board/{boardUri}"

@inject IUserService UserService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h1><a title="Board URI" class="board_uri" @onclick="CopyTextToClipboard">@boardUri</a> Slate Whiteboarding</h1>
@if (AuthenticationService.User != null)
{
<div class="container-fluid">

  <textarea @bind="@message" @oninput="@((EventArgs) => { SetMessage( EventArgs.Value.ToString() ); })" />
  <!-- <textarea value="@message" @onkeyup="UpdateValue" @onchange="Send" /> -->
</div>
}
else
{
<!-- if not the Editor, just show an output window with the text -->
<div class="container-fluid ">
  <div class="">
    <textarea @bind="@message" disabled="true" />
  </div>
</div>
}
@code {
  [Parameter] public string boardUri { get; set; }
  private HubConnection hubConnection;
  private string message;
  private User currentUser;

  protected override async Task OnInitializedAsync()
  {
    currentUser = AuthenticationService.User;
    Console.WriteLine(boardUri);
    hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri($"/slatehub"))
    .Build();


    hubConnection.On<string>("ReceiveMessage", (msg) =>
    {
      Console.WriteLine("RECEIVED FROM SERVER {0}", msg);
      message = msg;
      Console.WriteLine("MESSAGE UPDATED TO: {0}", message);
      StateHasChanged();
    });

    await hubConnection.StartAsync();

    await SetupBoardGroup();
  }

  private async Task SetupBoardGroup()
  {
    await hubConnection.SendAsync("AddToGroup", boardUri);
  }

  private async void SetMessage(string msg)
  {
    message = msg;
    await Send();
  }

  async Task Send()
  {
    Console.WriteLine("HIT SEND HANDLER {0}, by {1}", message, currentUser.Id);
    await hubConnection.SendAsync("SendMessageByUser", message, currentUser.Id);
  }

  public bool IsConnected =>
  hubConnection.State == HubConnectionState.Connected;

  public async ValueTask DisposeAsync()
  {
    await hubConnection.DisposeAsync();
  }

  private async Task CopyTextToClipboard()
  {
    await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", NavigationManager.Uri);
  }
}
